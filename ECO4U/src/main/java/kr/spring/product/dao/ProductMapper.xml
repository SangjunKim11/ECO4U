<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.spring.product.dao.ProductMapper">
	
	<resultMap type="kr.spring.product.vo.P_reviewVO" id="reviewMap">
	<result property="productVO.p_name" column="p_name"/>
	<result property="productVO.p_status" column="p_status"/>
	<result property="productVO.p_price" column="p_price"/>
	<result property="productVO.p_dprice" column="p_dprice"/>
	<result property="productVO.p_quantity" column="p_quantity"/>
	<result property="productVO.p_category" column="p_category"/>
	<result property="productVO.p_photo" column="p_photo"/>
	<result property="productVO.p_photoname" column="p_photoname"/>
	<result property="productVO.p_brand" column="p_brand"/>
	</resultMap>

	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT
		 COUNT(*)
		FROM product
		<where>
			<if test="category == 0">
				p_category = 1 OR p_category = 2 OR p_category = 3
			</if>
			<if test="category == 1">
				p_category = 1
			</if>
			<if test="category == 2">
				p_category = 2
			</if>
			<if test="category == 3">
				p_category = 3
			</if>
		</where>
	</select>
	
	<select id="selectList" parameterType="map" resultType="kr.spring.product.vo.ProductVO">
SELECT
  		   *
  		FROM (SELECT
  		        a.*,
  		        rownum rnum
  		      FROM (SELECT
  		              product.p_num,
					  product.p_name,
					  product.p_price,
					  product.p_dprice,
					  product.p_quantity,
					  product.p_category,
					  product.p_brand,
					  product.p_photoname,
					  product.reg_date,
					  <if test="order == 'review'">
					  NVL(b.r_count,0) as r_count,
					  </if>
					  product.modify_date
		            FROM product
					<where>
						<if test="order != 'review'">
							<if test="category == 0">
								product.p_category = 1 OR product.p_category = 2 OR product.p_category = 3 
							</if>
							<if test="category == 1">
								product.p_category = 1
							</if>
							<if test="category == 2">
								product.p_category = 2
							</if>
							<if test="category == 3">
								product.p_category = 3
							</if>
						</if>
					</where>
					<if test="order == 'new'">
						ORDER BY reg_date DESC)a)
					</if>
					<if test="order == 'hignPrice'">
						ORDER BY p_price DESC)a)
					</if>
					<if test="order == 'lowPrice'">
						ORDER BY p_price ASC)a)
					</if>
					<if test="order == 'review'">
						left outer join 
                    		(SELECT p_num, COUNT(*) as r_count FROM p_review group by p_num) b 
                    	on product.p_num = b.p_num
                    	<where>
                    	<if test="category == 0">
								product.p_category = 1 OR product.p_category = 2 OR product.p_category = 3 
							</if>
							<if test="category == 1">
								product.p_category = 1
							</if>
							<if test="category == 2">
								product.p_category = 2
							</if>
							<if test="category == 3">
								product.p_category = 3
							</if>
						</where>
                    	order by r_count desc)a)
					</if>

		<![CDATA[
  		WHERE rnum >= #{start} AND rnum <= #{end}
  		]]>
	</select>
	
	<!-- 상품 목록(관리자) -->
	<select id="selectProductCount" parameterType="map" resultType="integer">
		SELECT COUNT(*)
		FROM product
		WHERE p_status > #{p_status}
  		<if test="keyword !=null and keyword!=''">
  			<if test="keyfield == 1">
  				<if test="keyword.equalsIgnoreCase('living')">
  					AND p_category = 1
  				</if>
  				<if test="keyword.equalsIgnoreCase('beauty')">
  					AND p_category = 2
  				</if>
  				<if test="keyword.equalsIgnoreCase('fashion')">
  					AND p_category = 3
  				</if>
  				<if test="!keyword.equalsIgnoreCase('living') and !keyword.equalsIgnoreCase('beauty') and !keyword.equalsIgnoreCase('fashion')">
  					AND p_category = 0
  				</if>
  			</if>
  			<if test="keyfield == 2">
  				AND p_name LIKE '%' || #{keyword} || '%'
  			</if>
  			<if test="keyfield == 3">
  				AND p_brand LIKE '%' || #{keyword} || '%'
  			</if>
  		</if>
	</select>
	
	<!-- 검색 결과 리스트(관리자) -->
	<select id="selectProductList" parameterType="map" resultType="kr.spring.product.vo.ProductVO">
		SELECT *
		FROM (SELECT a.*, rownum rnum
			  FROM (SELECT * FROM product
			  WHERE p_status > #{p_status}
			  <if test="keyword != null and keyword != ''">
				 <if test="keyfield == 1">
				  	<if test="keyword.equalsIgnoreCase('living')">
	  					AND p_category = 1
	  				</if>
	  				<if test="keyword.equalsIgnoreCase('beauty')">
	  					AND p_category = 2
	  				</if>
	  				<if test="keyword.equalsIgnoreCase('fashion')">
	  					AND p_category = 3
	  				</if>
	  				<if test="!keyword.equalsIgnoreCase('living') and !keyword.equalsIgnoreCase('beauty') and !keyword.equalsIgnoreCase('fashion')">
  						AND p_category = 0
  					</if>
			  	</if>
			  	<if test="keyfield == 2">
			  		AND p_name LIKE '%' || #{keyword} || '%'
			  	</if>
			  	<if test="keyfield == 3">
			  		AND p_brand LIKE '%' || #{keyword} || '%'
			  	</if>
			  </if>
			  ORDER BY reg_date DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>	
	</select>
	
	
	<!--상품 재고 수정-->
	<update id="changeStock" parameterType="kr.spring.product.vo.ProductVO">
		UPDATE product SET
			p_quantity = p_quantity - #{p_quantity}
		WHERE p_num = #{p_num}
	</update>
	
	<!--상품 수정-->
	<update id="updateProduct" parameterType="kr.spring.product.vo.ProductVO">
		UPDATE product SET
			<if test="p_photoname != ''">
			p_photo=#{p_photo},
			p_photoname=#{p_photoname},
			</if>
			p_name=#{p_name},
			p_cont1=#{p_cont1},
			p_cont2=#{p_cont2},
			p_brand=#{p_brand},
			p_price=#{p_price},
			p_dprice=#{p_dprice},
			p_quantity=#{p_quantity},
			p_status=#{p_status},
			p_category=#{p_category},
			modify_date=SYSDATE
		WHERE p_num=#{p_num}
	</update>
	

	<!--리뷰 목록 -->
	<select id="selectListReview" parameterType="map" resultType="kr.spring.product.vo.P_reviewVO">
		SELECT
		 *
		FROM (SELECT
			  a.*,
			  rownum rnum
			FROM (SELECT
				  r_num,
				  <![CDATA[
  		          REPLACE(REPLACE(r_content,'<','&lt;'),'>','&gt;') r_content,
  		          ]]>
				  r_photoname,
				  reg_date,
				  modify_date,
				  p_num,
				  mem_num,
				  id
				FROM p_review
				JOIN member USING(mem_num)
				WHERE p_num = #{p_num} 
				ORDER BY r_num DESC)a)
		<![CDATA[
  		WHERE rnum >= #{start} AND rnum <= #{end}
  		]]>
	</select>
	
	
	<!--리뷰 목록 -->
	<select id="selectMypageReviewList" parameterType="map" resultMap="reviewMap">
		SELECT
		 *
		FROM (SELECT
			  a.*,
			  rownum rnum
			FROM (SELECT
				  r.r_num,
				  <![CDATA[
  		          REPLACE(REPLACE(r_content,'<','&lt;'),'>','&gt;') r_content,
  		          ]]>
				  r.r_photo,
				  r.r_photoname,
				  r.reg_date,
				  r.modify_date,
				  r.p_num,
				  p.p_name,
				  like_cnt,
				  r.mem_num
				FROM p_review r
				JOIN product p
				ON r.p_num=p.p_num
				JOIN member m
				ON r.mem_num=m.mem_num and m.mem_num=#{mem_num}
				ORDER BY r_num DESC)a)
		<![CDATA[
  		WHERE rnum >= #{start} AND rnum <= #{end}
  		]]>
	</select>
	
	<select id="selectMypageReviewRowCount" parameterType="map" resultType="integer">
		SELECT
		 COUNT(*)
		FROM p_review r JOIN member m
		ON r.mem_num = m.mem_num AND r.mem_num=#{mem_num}
	</select>
</mapper>